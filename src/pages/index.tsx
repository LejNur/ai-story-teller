import Head from "next/head";
import styles from "@/styles/Home.module.css";
import Header from "@/components/Molecules/Header/Header";
import WindowBox from "@/components/Organism/Window/WindowBox";
import InputBox from "@/components/Molecules/InputBox/InputBox";
import { useState } from "react";
import SelectBox from "@/components/Molecules/SelectBox/SelectBox";
import { genres } from "@/constants/common";
import Button from "@/components/Atoms/Button/Button";
import {
  GenerateContentCandidate,
  GoogleGenerativeAI,
} from "@google/generative-ai";
import SwitchBox from "@/components/Molecules/SwitchBox/SwitchBox";

export default function Home() {
  const [character, setCharacter] = useState("");
  const [genre, setGenre] = useState("");
  const [response, setResponse] = useState("");
  const [loading, setLoading] = useState(false);
  const [approveAdult, setApproveAdult] = useState(false);

  const isSelected = genre !== "";

  const handleGenerate = async () => {
    setLoading(true);
    const prompt = `generate a ${genre} story for ${
      approveAdult ? "adult" : "children"
    }, with the character named ${character}`;

    if (process.env.NEXT_PUBLIC_GEMINI_KEY) {
      const genAI = new GoogleGenerativeAI(process.env.NEXT_PUBLIC_GEMINI_KEY);
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

      const result = await model.generateContent(prompt);
      console.log(result);

      const output = (
        result.response.candidates as GenerateContentCandidate[]
      )[0].content.parts[0].text;

      console.log(output);

      if (output) setResponse(output);
    }
    setLoading(false);
  };

  return (
    <>
      <Head>
        <title>AI Story Teller</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Header title="AI StoryTeller" />
        <div className={styles.content}>
          <WindowBox>
            <InputBox
              label="Character name"
              value={character}
              setValue={setCharacter}
            />
            <SelectBox
              label="Select Genre"
              list={genres}
              setAction={setGenre}
            />
            <SwitchBox
              label="Genre"
              value={approveAdult}
              setValue={setApproveAdult}
            />
            <Button
              label="Generate"
              onClick={() => handleGenerate()}
              disabled={!character.trim().length || !isSelected}
            />

            {loading ? (
              <div className={styles.loading}>
                <p>Loading...</p>
              </div>
            ) : (
              <div className={styles.response}>{response}</div>
            )}
          </WindowBox>
        </div>
      </main>
    </>
  );
}
